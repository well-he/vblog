(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{840:function(e,a,t){"use strict";t.r(a);var s=t(40),l=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile-文件的编写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件的编写"}},[e._v("#")]),e._v(" Dockerfile 文件的编写")]),e._v(" "),t("h3",{attrs:{id:"dockerfile-文件的编写-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件的编写-2"}},[e._v("#")]),e._v(" Dockerfile 文件的编写")]),e._v(" "),t("p",[t("code",[e._v("FROM")]),e._v(" : 指定基础镜像 (可以到"),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),t("OutboundLink")],1),e._v("上面去寻找想要的镜像)\n"),t("code",[e._v("RUN")]),e._v(" : 执行命令，有两种模式:")]),e._v(" "),t("ol",[t("li",[e._v("shell 格式："),t("code",[e._v("RUN <命令>")]),e._v("，就像直接在命令行中输入的命令一样;例如 "),t("code",[e._v("rm -rf xxx")]),e._v(","),t("code",[e._v("npm install")]),e._v("等等;")]),e._v(" "),t("li",[e._v("exec 格式："),t("code",[e._v('RUN ["可执行文件", "参数1", "参数2"]')]),e._v("，这更像是函数调用中的格式。\n"),t("blockquote",[t("p",[e._v("为了保持 Dockerfile 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 RUN 指令用反斜杠 \\ 分割成多行,例如:")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('RUN rm -f package-lock.json \\\n  ; rm -rf .idea \\\n  ; rm -rf node_modules \\\n  ; npm config set registry "https://registry.npm.taobao.org/" \\\n  && npm install\n')])])]),t("p",[t("code",[e._v("COPY")]),e._v(" : COPY 指令将从构建上下文目录中 <源路径> 的文件/目录复制到新的一层的镜像内的 <目标路径> 位置.")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("COPY [--chown=<user>:<group>] <源路径>... <目标路径>")])]),e._v(" "),t("li",[t("code",[e._v('COPY [--chown=<user>:<group>] ["<源路径1>",... "<目标路径>"]')])])]),e._v(" "),t("p",[e._v("例如:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("COPY package.json /usr/src/app/\n")])])]),t("p",[e._v("将 package.json 文件复制到镜像内的"),t("code",[e._v("/usr/src/app")]),e._v("下面")]),e._v(" "),t("p",[t("code",[e._v("LABEL")]),e._v(" : 可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  # 设置一个或多个LABEL\n  LABEL com.example.version="0.0.1-beta"\n\n  LABEL vendor="ACME Incorporated"\n\n  LABEL com.example.release-date="2015-02-12"\n\n  LABEL com.example.version.is-production=""\n')])])]),t("p",[e._v("一个镜像可以包含多个标签，但建议将多个标签放入到一个 LABEL 指令中:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# Set multiple labels at once, using line-continuation characters to break long lines\nLABEL vendor=ACME\\ Incorporated \\\n    com.example.is-beta= \\\n    com.example.is-production="" \\\n    com.example.version="0.0.1-beta" \\\n    com.example.release-date="2015-02-12"\n')])])]),t("p",[t("code",[e._v("CMD")]),e._v(" : 用于执行目标镜像中包含的软件，可以包含参数")]),e._v(" "),t("ol",[t("li",[e._v("shell 格式：CMD <命令>")]),e._v(" "),t("li",[e._v('exec 格式：CMD ["可执行文件", "参数 1", "参数 2"...]')]),e._v(" "),t("li",[e._v('参数列表格式：CMD ["参数 1", "参数 2"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。\n'),t("blockquote",[t("p",[e._v('CMD 大多数情况下都应该以 CMD ["executable", "param1", "param2"...] 的形式使用')])])])]),e._v(" "),t("p",[t("code",[e._v("ENV")]),e._v(" : 设置环境变量")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("ENV <key> <value>")])]),e._v(" "),t("li",[t("code",[e._v("ENV <key1>=<value1> <key2>=<value2>...")])])]),e._v(" "),t("p",[t("code",[e._v("VOLUME")]),e._v(" : 用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录.")]),e._v(" "),t("ol",[t("li",[t("code",[e._v('VOLUME ["<路径1>", "<路径2>"...]')])]),e._v(" "),t("li",[t("code",[e._v("VOLUME <路径>")]),e._v(" "),t("blockquote",[t("p",[e._v("强烈建议使用 VOLUME 来管理镜像中的可变部分和用户可以改变的部分。")])])])]),e._v(" "),t("p",[t("code",[e._v("EXPOSE")]),e._v(" : 声明运行时容器提供服务端口")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("EXPOSE <端口1> [<端口2>...]\n")])])]),t("blockquote",[t("p",[e._v("要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")])]),e._v(" "),t("p",[t("code",[e._v("WORKDIR")]),e._v(" : 指定工作目录，如该目录不存在，WORKDIR 会帮你建立目录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("WORKDIR <工作目录路径>\n")])])]),t("p",[t("code",[e._v("USER")]),e._v(" : 指定当前用户.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("USER <用户名>[:<用户组>]\n")])])]),t("p",[t("code",[e._v("HEALTHCHECK")]),e._v(" : HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令\nHEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令\n")])])]),t("p",[t("code",[e._v("MAINTAINER")]),e._v(" : 设置镜像的作者，可以是任意字符串。")])])}),[],!1,null,null,null);a.default=l.exports}}]);