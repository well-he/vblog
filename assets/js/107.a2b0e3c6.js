(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{843:function(t,a,i){"use strict";i.r(a);var s=i(40),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"git是什么"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git是什么"}},[t._v("#")]),t._v(" Git是什么？")]),t._v(" "),i("p",[t._v("Git 是一个开源的分布式版本控制系统.")]),t._v(" "),i("h2",{attrs:{id:"什么是版本控制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制"}},[t._v("#")]),t._v(" 什么是版本控制？")]),t._v(" "),i("p",[t._v("版本控制是一种记录一个或若干文件内容变化,以便将来查阅特定版本修订情况的系统.")]),t._v(" "),i("h3",{attrs:{id:"集中化的版本控制系统和分布式版本控制系统"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#集中化的版本控制系统和分布式版本控制系统"}},[t._v("#")]),t._v(" 集中化的版本控制系统和分布式版本控制系统")]),t._v(" "),i("p",[t._v("集中化的版本控制系统,都有一个单一的集中管理的服务器,保存所有文件的修订版本,而协同工作的人们都通过客户端连到这台服务器,取出最新的文件或者提交更新.也就是说,  "),t._v("是多对一,如下图：")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://i.loli.net/2019/03/14/5c8a2964c00a2.png",alt:"未命名文件.png"}})]),t._v(" "),i("p",[t._v("这样做最显而易见的缺点就是服务器很容易发生单点故障而导致的全线奔溃.比如某一天服务器突然宕机,那么在宕机的这段时间内,所有的协同工作者均无法提交更新,无法实现协同工作,一旦服务器的磁盘受损,恰巧没有对文件进行备份,那就会发生数据丢失的惨剧.这个项目就相当于完全归零（"),i("s",[t._v("删库跑路")]),t._v("）🙃️\n分布式版本控制系统的客户端并不只提取最新版本的文件快照,而是把代码仓库完整地镜像备份下来.这么一来,任何一处协同工作用的服务器发生故障,事后都可以用任何一个镜像出来的本地仓库恢复.因为每一次的提取操作,实际上都是一次对代码仓库的完整备份,如下图：")]),t._v(" "),i("p",[i("img",{attrs:{src:"https://i.loli.net/2019/03/14/5c8a2b75051e1.png",alt:"未命名文件 (1).png"}})]),t._v(" "),i("h3",{attrs:{id:"为什么使用git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用git"}},[t._v("#")]),t._v(" 为什么使用Git？")]),t._v(" "),i("p",[t._v("Git 是分布式的.这是 Git 和其它非分布式的版本控制系统,例如 svn,cvs 等,最核心的区别.分布式带来以下好处：")]),t._v(" "),i("ol",[i("li",[t._v("更加安全,每个人的电脑上都是一个完整的版本库,独立负责自己的工作部分却又整体在推进项目的进行.只需把各自的修改推送给对方,就可以互相看到对方的修改了.")]),t._v(" "),i("li",[t._v("集中式版本控制系统,一旦中央服务器出了问题,所有人都无法工作.")]),t._v(" "),i("li",[t._v("分布式版本控制系统,每个人电脑中都有完整的版本库,所以某人的机器挂了,并不影响其它人.")])]),t._v(" "),i("h2",{attrs:{id:"安装"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),i("h3",{attrs:{id:"windows-环境安装"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#windows-环境安装"}},[t._v("#")]),t._v(" Windows 环境安装")]),t._v(" "),i("p",[t._v("在Git 官方下载地址下载 exe 安装包.按照安装向导安装即可.")]),t._v(" "),i("p",[t._v("建议安装 Git Bash 这个 git 的命令行工具.")]),t._v(" "),i("h3",{attrs:{id:"mac-环境安装"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mac-环境安装"}},[t._v("#")]),t._v(" Mac 环境安装")]),t._v(" "),i("p",[t._v("在Git 官方下载地址下载 mac 安装包.按照安装向导安装即可.")]),t._v(" "),i("h2",{attrs:{id:"配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),i("p",[t._v("Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量.")]),t._v(" "),i("h3",{attrs:{id:"用户信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#用户信息"}},[t._v("#")]),t._v(" 用户信息")]),t._v(" "),i("p",[t._v("当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址. 这样做很重要,因为每一个 Git 的提交都会使用这些信息,并且它会写入到你的每一次提交中,不可更改：")]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('$ git config --global user.name "xieyezi"\n$ git config --global user.email xieyezi@example.com\n')])])]),i("p",[t._v("在你每一次提交你代码更新信息时,会携带你的用户信息")]),t._v(" "),i("h3",{attrs:{id:"gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),i("p",[t._v("这个文件里配置的文件或目录,会自动被 git 所忽略,不纳入版本控制.项目在进行开发时,经常会产生一些临时文件或者依赖文件,例如"),i("code",[t._v("npm node_modules")]),t._v("等,这些没有必要放入git服务器进行托管,就会被"),i("code",[t._v(".gitignore")]),t._v("纳入.")]),t._v(" "),i("h3",{attrs:{id:"git基本原理简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git基本原理简介"}},[t._v("#")]),t._v(" git基本原理简介")]),t._v(" "),i("h4",{attrs:{id:"版本库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本库"}},[t._v("#")]),t._v(" 版本库")]),t._v(" "),i("p",[t._v("当你一个项目到本地或创建一个 git 项目,项目目录下会有一个隐藏的 .git 子目录.这个目录是 git 用来跟踪管理版本库的,千万不要手动修改.")]),t._v(" "),i("h4",{attrs:{id:"文件状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件状态"}},[t._v("#")]),t._v(" 文件状态")]),t._v(" "),i("p",[t._v("在 git 中,你的文件可能会处于三种状态之一：")]),t._v(" "),i("ul",[i("li",[t._v("已修改（modified） - 已修改表示修改了文件,但还没保存到数据库中.")]),t._v(" "),i("li",[t._v("已暂存（staged） - 已暂存表示对一个已修改文件的当前版本做了标记,使之包含在下次提交的快照中.")]),t._v(" "),i("li",[t._v("已提交（committed） - 已提交表示数据已经安全的保存在本地数据库中.")])]),t._v(" "),i("h4",{attrs:{id:"工作区域"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#工作区域"}},[t._v("#")]),t._v(" 工作区域")]),t._v(" "),i("p",[t._v("与文件状态对应的,不同状态的文件在 Git 中处于不同的工作区域.")]),t._v(" "),i("ul",[i("li",[t._v("工作区（working） - 当你 git clone 一个项目到本地,相当于在本地克隆了项目的一个副本.工作区是对项目的某个版本独立提取出来的内容. 这些从 Git 仓库的压缩数据库中提取出来的文件,放在磁盘上供你使用或修改.")]),t._v(" "),i("li",[t._v("暂存区（staging） - 暂存区是一个文件,保存了下次将提交的文件列表信息,一般在 Git 仓库目录中. 有时候也被称作‘索引’,不过一般说法还是叫暂存区.")]),t._v(" "),i("li",[t._v("本地仓库（local） - 提交更新,找到暂存区域的文件,将快照永久性存储到 Git 本地仓库.")]),t._v(" "),i("li",[t._v("远程仓库（remote） - 以上几个工作区都是在本地.为了让别人可以看到你的修改,你需要将你的更新推送到远程仓库.同理,如果你想同步别人的修改,你需要从远程仓库拉取更新.")])])])}),[],!1,null,null,null);a.default=v.exports}}]);